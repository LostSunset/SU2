/*!
 * \file CBFMVariable.hpp
 * \brief Main class for defining the variables of the BFM solver.
 * \author E.C. Bunschoten
 * \version 7.1.0 "Blackbird"
 *
 * SU2 Project Website: https://su2code.github.io
 *
 * The SU2 Project is maintained by the SU2 Foundation
 * (http://su2foundation.org)
 *
 * Copyright 2012-2020, SU2 Contributors (cf. AUTHORS.md)
 *
 * SU2 is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * SU2 is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with SU2. If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "CVariable.hpp"
/*!
 * \class CBFMVariable
 * \brief Main class for defining the variables of the Body-Force Model solver.
 * \author E.C. Bunschoten
 */
class CBFMVariable : public CVariable {
    using MatrixType = C2DContainer<unsigned long, su2double, StorageType::RowMajor,    64, DynamicSize, DynamicSize>;
    protected:
    unsigned short n_BFM_parameters{};  //Number of blade geometry parameters
    MatrixType Geometric_Parameters,    //Data structure where blade geometry parameters are stored
    Body_Force_Vector,  //Vector for body-force storage
    Relative_Velocity,  //Relative velocity storage vector
    proj_vector_axial,  //Axial cylindrical projection vector component
    proj_vector_tangential, //Tangential cylindrical projection vector component
    proj_vector_radial; //Radial cylindrical projection vector component

    public:
    
    CBFMVariable(unsigned long nPoints, unsigned short nDim, unsigned short nBFMParams);
    ~CBFMVariable() override = default;
    /*!
    * \brief Get the body-forces generated by the BFM
    * \param[in] iPoint - Node index.
    * \param[in] iDim - Cartesian body-force component.
    * \return - Body-force component.
    */
    inline virtual su2double GetBodyForce(unsigned long iPoint, unsigned short iDim) override {return Body_Force_Vector(iPoint, iDim);};

    /*!
    * \brief Set the body-forces generated by the BFM
    * \param[in] iPoint - Node index.
    * \param[in] iDim - Cartesian body-force component.
    * \param[in] value - value of the body-force component.
    */
    inline virtual void SetBodyForce(unsigned long iPoint, unsigned short iDim, su2double value) override {Body_Force_Vector(iPoint, iDim) = value;}

    /*!
    * \brief Get the relative velocity
    * \param[in] iPoint - Node index.
    * \param[in] iDim - Cylindrical relative velocity dimension.
    * \return - Relative velocity component.
    */
    inline virtual su2double GetRelativeVelocity(unsigned long iPoint, unsigned short iDim) override {return Relative_Velocity(iPoint, iDim);}

    /*!
    * \brief Set the relative velocity
    * \param[in] iPoint - Node index.
    * \param[in] iDim - Cylindrical relative velocity component.
    * \param[in] value - value of the relative velocity component.
    */
    void SetRelativeVelocity(unsigned long iPoint, unsigned short iDim, su2double value){Relative_Velocity(iPoint, iDim)= value;}

    /*!
    * \brief Get the axial projection component from Cartesian to cylindrical
    * \param[in] iPoint - Node index.
    * \param[in] iDim - Cartesian dimension index
    * \return - Cylindrical axial projection of Cartesian node coordinates.
    */
    su2double GetAxialProjection(unsigned long iPoint, unsigned short iDim){return proj_vector_axial(iPoint, iDim);};

    /*!
    * \brief Get the tangential projection component from Cartesian to cylindrical
    * \param[in] iPoint - Node index.
    * \param[in] iDim - Cartesian dimension index
    * \return - Cylindrical tangential projection of Cartesian node coordinates.
    */
    su2double GetTangentialProjection(unsigned long iPoint, unsigned short iDim){return proj_vector_tangential(iPoint, iDim);};

    /*!
    * \brief Get the radial projection component from Cartesian to cylindrical
    * \param[in] iPoint - Node index.
    * \param[in] iDim - Cartesian dimension index
    * \return - Cylindrical radial projection of Cartesian node coordinates.
    */
    su2double GetRadialProjection(unsigned long iPoint, unsigned short iDim){return proj_vector_radial(iPoint, iDim);};
    
    /*!
    * \brief Set the axial projection component of the Cartesian node coordinates.
    * \param[in] iPoint - Node index.
    * \param[in] iDim - Cartesian dimension index
    * \param[in] value - value of the axial projection component.
    */
    void SetAxialProjection(unsigned long iPoint, unsigned short iDim, su2double value){proj_vector_axial(iPoint, iDim)= value;}

    /*!
    * \brief Set the tangential projection component of the Cartesian node coordinates.
    * \param[in] iPoint - Node index.
    * \param[in] iDim - Cartesian dimension index
    * \param[in] value - value of the tangential projection component.
    */
    void SetTangentialProjection(unsigned long iPoint, unsigned short iDim, su2double value){proj_vector_tangential(iPoint, iDim) = value;}

    /*!
    * \brief Set the radial projection component of the Cartesian node coordinates.
    * \param[in] iPoint - Node index.
    * \param[in] iDim - Cartesian dimension index
    * \param[in] value - value of the radial projection component.
    */
    void SetRadialProjection(unsigned long iPoint, unsigned short iDim, su2double value){proj_vector_radial(iPoint, iDim)= value;}
    

};